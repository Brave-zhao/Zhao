!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.OmcsClient=e():n.OmcsClient=e()}(this,function(){"use strict";var __webpack_modules__={"./src/omcs-client.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar OmcsClient = /*#__PURE__*/function () {\n  function OmcsClient(options) {\n    _classCallCheck(this, OmcsClient);\n\n    _defineProperty(this, "DEFAULT_PLUGIN_DOWNLOAD_URL", "http://www.oraycn.com/DownLoadFiles/OMCS/OMCS.Service4Web.Setup.msi");\n\n    _defineProperty(this, "DEFAULT_SERVER_IP", "127.0.0.1");\n\n    _defineProperty(this, "DEFAULT_SERVER_PORT", 9900);\n\n    _defineProperty(this, "desktopInit", false);\n\n    _defineProperty(this, "cameraInit", false);\n\n    _defineProperty(this, "microphoneInit", false);\n\n    _defineProperty(this, "cameraOptionsMap", {});\n\n    var defaultOptions = {\n      initOpenCallback: null,\n      initCloseCallback: null,\n\n      /**\r\n       * 连接OMCS服务器失败回调(通常是插件没有打开或OMCS服务器地址配置错误)\r\n       */\n      connectOmcsServiceError: null,\n\n      /**\r\n       * 连接完毕后的回调\r\n       */\n      connectSuccessCallback: null,\n\n      /**\r\n       * 连接完毕后的回调\r\n       */\n      connectFailCallback: null,\n\n      /**\r\n       * 当与目标媒体服务器的连接断开时，触发此事件\r\n       */\n      connectionInterruptedCallback: null,\n\n      /**\r\n       * 当与目标媒体服务器重连成功时，触发此事件\r\n       */\n      connectionRebuildSucceedCallback: null,\n\n      /**\r\n       * 设备断开连接后，触发此事件\r\n       * 返回：id和deviceType\r\n       */\n      deviceDisconnectedCallback: null,\n\n      /**\r\n       * 发生错误时的回调\r\n       * 格式：\r\n       * {type: 0, FailCause:"启动失败，多媒体webSocket还未连成功"}\r\n       * type:\r\n       * -1:代码错误\r\n       * 0:内部错误\r\n       * 其他：参考OMCSMessageType\r\n       */\n      errorCallback: null,\n\n      /**\r\n       * 连接的guests状态更新回调\r\n       */\n      guestsUpdateCallback: null,\n\n      /**\r\n       * 指定插件的下载地址\r\n       */\n      pluginDownloadUrl: this.DEFAULT_PLUGIN_DOWNLOAD_URL,\n\n      /**\r\n       * @NotNull     唯一标识的用户id，全局唯一\r\n       */\n      id: null,\n\n      /**\r\n       * 密码\r\n       */\n      password: "",\n\n      /**\r\n       * OMCS服务器的IP地址\r\n       */\n      serverIP: this.DEFAULT_SERVER_IP,\n\n      /**\r\n       * OMCS服务器的端口号\r\n       */\n      serverPort: this.DEFAULT_SERVER_PORT\n    };\n    this.options = _objectSpread(_objectSpread({}, defaultOptions), options);\n  } // region # 建立连接与登录相关\n\n  /**\r\n   * 初始化，使用前必须调用此方法\r\n   * 请在connectOpenCallback进行后续操作\r\n   */\n\n\n  _createClass(OmcsClient, [{\n    key: "init",\n    value: function init() {\n      var _this = this;\n\n      console.log("init");\n      this.multimediaManager = MultimediaManagerFactory.GetSingleton();\n      this.multimediaManager.SetAutoReconnect(true);\n      var initOpenCallback = this.options.initOpenCallback;\n      var initCloseCallback = this.options.initCloseCallback;\n      /**\r\n       * 插件打开成功后的回调\r\n       */\n\n      this.multimediaManager.addListener("open", function () {\n        if (initOpenCallback) initOpenCallback(); // 初始化成功后，与服务器连接并登录\n\n        _this.login();\n      });\n      /**\r\n       * 插件关闭后连接失败的回调\r\n       */\n\n      this.multimediaManager.addListener("close", function () {\n        if (initCloseCallback) initCloseCallback();\n      });\n      /**\r\n       * 初始化插件，提示插件是否已经下载，引导用户前往下载\r\n       */\n\n      this.multimediaManager.addListener("connectOmcsServiceError", function (error) {\n        if (_this.options.connectOmcsServiceError) _this.options.connectOmcsServiceError(error);\n        /*// 打开插件\r\n        if (!this.pluginOpen) {\r\n            this.pluginOpen = document.createElement(\'a\');\r\n        }\r\n        this.pluginOpen.href = "OmcsWebAddin://";\r\n        this.pluginOpen.click();\r\n          let con = confirm(\'连接OMCS服务插件失败，请确定是否已下载并安装OMCS服务插件，是否前往下载？\');\r\n        let pluginDownloadUrl = this.options.pluginDownloadUrl;\r\n        if (con === true) {\r\n            window.open(pluginDownloadUrl);\r\n        } else {\r\n            // alert(\'请确认已打开OMCS服务，或尝试重启服务！\');\r\n        }*/\n      });\n      /**\r\n       * 消息回调\r\n       */\n\n      this.multimediaManager.addListener("messageReceived", function (messageType, msg) {\n        var baseResult = JSON.parse(msg); // 错误处理\n\n        if (baseResult.ResultCode !== 0) {\n          if (_this.options.errorCallback) {\n            _this.options.errorCallback(_objectSpread({\n              type: messageType\n            }, baseResult));\n          } // return;\n\n        }\n\n        if (messageType === OMCSMessageType.LoginOmcsResult) {\n          if (isSuccess(baseResult)) {\n            // 登录成功\n            if (_this.options.connectSuccessCallback) _this.options.connectSuccessCallback(); // 绑定回调事件\n\n            if (_this.options.connectionInterruptedCallback) {\n              _this.multimediaManager.ConnectionInterrupted = _this.options.connectionInterruptedCallback;\n            }\n\n            if (_this.options.connectionRebuildSucceedCallback) {\n              _this.multimediaManager.ConnectionRebuildSucceed = _this.options.connectionRebuildSucceedCallback;\n            }\n\n            if (_this.options.deviceDisconnectedCallback) {\n              _this.multimediaManager.DeviceDisconnected = _this.options.deviceDisconnectedCallback;\n            }\n          } else {\n            // 登录失败\n            if (_this.options.connectFailCallback) _this.options.connectFailCallback(msg);\n          }\n        }\n      });\n      /**\r\n       * 连接的guests更新\r\n       */\n\n      this.multimediaManager.addListener("guestsUpdate", function (guests) {\n        if (_this.options.guestsUpdateCallback) _this.options.guestsUpdateCallback(guests);\n      });\n    }\n  }, {\n    key: "setCameraEncodeQuality",\n    value: function setCameraEncodeQuality(value) {\n      if (this.multimediaManager) {\n        this.multimediaManager.SetCameraEncodeQuality(value);\n      }\n    }\n  }, {\n    key: "setDesktopEncodeQuality",\n    value: function setDesktopEncodeQuality(value) {\n      if (this.multimediaManager) {\n        this.multimediaManager.SetDesktopEncodeQuality(value);\n      }\n    }\n  }, {\n    key: "openPlugin",\n    value: function openPlugin() {\n      // 打开插件\n      if (!this.pluginOpen) {\n        this.pluginOpen = document.createElement(\'a\');\n      }\n\n      this.pluginOpen.href = "OmcsWebAddin://";\n      this.pluginOpen.click();\n    }\n  }, {\n    key: "downloadPlugin",\n    value: function downloadPlugin() {\n      var pluginDownloadUrl = this.options.pluginDownloadUrl || this.DEFAULT_PLUGIN_DOWNLOAD_URL;\n      window.open(pluginDownloadUrl);\n    }\n    /**\r\n     * 登录到OMCS服务器\r\n     */\n\n  }, {\n    key: "login",\n    value: function login() {\n      console.log("connect");\n      var _this$options = this.options,\n          id = _this$options.id,\n          password = _this$options.password,\n          serverIP = _this$options.serverIP,\n          serverPort = _this$options.serverPort;\n\n      try {\n        if (this.multimediaManager.Connected() === true) {\n          this.multimediaManager.Initialize(id, password, serverIP, serverPort);\n        } else {\n          if (this.options.errorCallback) this.options.errorCallback({\n            type: 0,\n            FailCause: "启动失败，多媒体webSocket还未连成功"\n          });\n        }\n      } catch (ex) {\n        console.error(ex);\n        if (this.options.errorCallback) this.options.errorCallback({\n          type: -1,\n          "FailCause": ex\n        });\n      }\n    }\n    /**\r\n     * 与插件建立WebSocket连接\r\n     */\n\n  }, {\n    key: "connect",\n    value: function connect() {\n      this.multimediaManager.connection();\n    }\n    /**\r\n     * 与插件断开WebSocket连接\r\n     */\n\n  }, {\n    key: "disconnect",\n    value: function disconnect() {\n      if (this.multimediaManager.Connected() === true) {\n        var _this$multimediaManag;\n\n        (_this$multimediaManag = this.multimediaManager.websocket) === null || _this$multimediaManag === void 0 ? void 0 : _this$multimediaManag.close();\n      }\n    }\n    /**\r\n     * 销毁实例\r\n     */\n\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      this.disconnect();\n      GlobalUtil.multimediaManager = null;\n    }\n    /**\r\n     * 当前是否正常，当此时为true时，才可以进行后续操作（远程桌面、摄像头、麦克风）\r\n     * @returns {boolean|*}\r\n     */\n\n  }, {\n    key: "isAvailable",\n    value: function isAvailable() {\n      return this.multimediaManager.Available;\n    } // endregion\n    // region # 远程桌面相关\n\n    /**\r\n     * 建立远程桌面连接\r\n     * @param options       配置: {}\r\n     */\n\n  }, {\n    key: "desktop",\n    value: function desktop(options) {\n      var _this2 = this;\n\n      var defaultOptions = {\n        /**\r\n         * @NotNull 目标id\r\n         */\n        destId: null,\n\n        /**\r\n         * @NotNull 要渲染画面的元素id\r\n         */\n        domId: null,\n\n        /**\r\n         * 是否仅能查看不能操作\r\n         */\n        watchingOnly: false,\n\n        /**\r\n         * 断开连接后的回调\r\n         * 返回两个参数：\r\n         * id:      目标id\r\n         * type:    连接断开的类型\r\n         *          [自身断开连接：GuestActiveDisconnect, 被远程方断开连接：OwnerOffline]\r\n         */\n        disconnectedCallback: null,\n\n        /**\r\n         * 连接建立后的回调\r\n         * 返回参数:\r\n         * baseResult: {\r\n         *      FailCause: "成功",\r\n         *      OwnerID: "aa01",\r\n         *      ResultCode: 0,\r\n         *      width: 1280,\r\n         *      height: 720\r\n         * }\r\n         */\n        connectEndedCallback: null\n      };\n      this.desktopOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n      var _this$desktopOptions = this.desktopOptions,\n          destId = _this$desktopOptions.destId,\n          domId = _this$desktopOptions.domId,\n          watchingOnly = _this$desktopOptions.watchingOnly; // 判空\n\n      if (destId === null) {\n        console.error("destId不能为空");\n        return;\n      }\n\n      if (domId === null) {\n        console.error("domId不能为空");\n        return;\n      }\n\n      if (!this.desktopInit) {\n        this.dynamicDesktopConnector = new DynamicDesktopConnector();\n        this.dynamicDesktopConnector.SetShowMouseCursor(true);\n\n        this.dynamicDesktopConnector.ConnectEnded = function (ownerID, baseResult) {\n          _this2.desktopConnectEnded(ownerID, baseResult);\n        };\n\n        this.dynamicDesktopConnector.Disconnected = function (id, type) {\n          _this2.desktopDisconnected(id, type);\n        };\n\n        this.desktopInit = true;\n      }\n\n      this.dynamicDesktopConnector.SetWatchingOnly(watchingOnly);\n      this.dynamicDesktopConnector.SetViewer($(domId));\n      this.dynamicDesktopConnector.BeginConnect(destId);\n    }\n  }, {\n    key: "desktopConnectEnded",\n    value: function desktopConnectEnded(ownerID, baseResult) {\n      var _this3 = this;\n\n      if (isSuccess(baseResult)) {\n        setTimeout(function () {\n          _this3.getDesktopSizeAndCallback(baseResult);\n        }, 500);\n      } else {\n        if (this.desktopOptions.connectEndedCallback) this.desktopOptions.connectEndedCallback(baseResult);\n      }\n    }\n  }, {\n    key: "getDesktopSizeAndCallback",\n    value: function getDesktopSizeAndCallback(baseResult) {\n      var desktopWidth = this.dynamicDesktopConnector.GetVideoWidth();\n      var desktopHeight = this.dynamicDesktopConnector.GetVideoHeight();\n      this.desktopUpdateRatio();\n      if (this.desktopOptions.connectEndedCallback) this.desktopOptions.connectEndedCallback(_objectSpread(_objectSpread({}, baseResult), {}, {\n        width: desktopWidth,\n        height: desktopHeight\n      }));\n    }\n  }, {\n    key: "desktopUpdateRatio",\n    value: function desktopUpdateRatio(width, height) {\n      var desktopWidth = this.dynamicDesktopConnector.GetVideoWidth();\n      var desktopHeight = this.dynamicDesktopConnector.GetVideoHeight();\n      var dom = $(this.desktopOptions.domId);\n      var style = document.defaultView.getComputedStyle(dom);\n      var reg = new RegExp("px", "g");\n      width = width || style.width.replace(reg, "");\n      height = height || style.height.replace(reg, "");\n      console.log("dom\'s Size:", width, height);\n      var xRatio = desktopWidth / width;\n      var yRatio = desktopHeight / height;\n      console.log(xRatio, yRatio);\n      this.dynamicDesktopConnector.SetScaleRatio(xRatio, yRatio);\n    }\n  }, {\n    key: "desktopDisconnected",\n    value: function desktopDisconnected(id, type) {\n      if (this.desktopOptions.disconnectedCallback) {\n        this.desktopOptions.disconnectedCallback(id, type);\n      }\n\n      this.dynamicDesktopConnector.Disconnect();\n    }\n  }, {\n    key: "desktopDisconnect",\n    value: function desktopDisconnect() {\n      var _this4 = this;\n\n      this.dynamicDesktopConnector.Disconnect();\n      setTimeout(function () {\n        var canvas = $(_this4.desktopOptions.domId);\n\n        _this4.dynamicDesktopConnector.ctx.clearRect(0, 0, canvas.width, canvas.height);\n      }, 500);\n    }\n  }, {\n    key: "desktopSetWatchingOnly",\n    value: function desktopSetWatchingOnly(watchingOnly) {\n      this.dynamicDesktopConnector.SetWatchingOnly(watchingOnly);\n    } // endregion\n    // region # 摄像头相关\n\n  }, {\n    key: "cameraEventRegister",\n    value: function cameraEventRegister(options) {\n      var defaultOptions = {\n        /**\r\n         * 断开连接后的回调\r\n         * 返回两个参数：\r\n         * id:      目标id\r\n         * type:    连接断开的类型\r\n         *          [自身断开连接：GuestActiveDisconnect, 被远程方断开连接：OwnerOffline]\r\n         */\n        disconnectedCallback: null,\n\n        /**\r\n         * 连接建立后的回调\r\n         * 返回参数:\r\n         * baseResult: {\r\n         *      FailCause: "成功",\r\n         *      OwnerID: "aa01",\r\n         *      ResultCode: 0,\r\n         * }\r\n         */\n        connectEndedCallback: null,\n\n        /**\r\n         * 重连成功后的回调\r\n         */\n        autoReconnectSucceedCallback: null\n      };\n      this.cameraEventOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n    }\n  }, {\n    key: "camera",\n    value: function camera(options) {\n      var _this$cameraOptionsMa,\n          _this5 = this;\n\n      var defaultOptions = {\n        /**\r\n         * @NotNull 目标id\r\n         */\n        destId: null,\n\n        /**\r\n         * @NotNull 要渲染画面的元素id\r\n         */\n        domId: null\n      };\n\n      var cameraOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n\n      var _cameraOptions$destId = cameraOptions.destId,\n          destId = _cameraOptions$destId === void 0 ? null : _cameraOptions$destId,\n          _cameraOptions$domId = cameraOptions.domId,\n          domId = _cameraOptions$domId === void 0 ? null : _cameraOptions$domId; // 判空\n\n      if (destId === null) {\n        console.error("destId不能为空");\n        return;\n      }\n\n      if (domId === null) {\n        console.error("domId不能为空");\n        return;\n      }\n\n      var dynamicCameraConnector = (_this$cameraOptionsMa = this.cameraOptionsMap[destId]) === null || _this$cameraOptionsMa === void 0 ? void 0 : _this$cameraOptionsMa.connector;\n\n      if (!dynamicCameraConnector) {\n        dynamicCameraConnector = new DynamicCameraConnector();\n        dynamicCameraConnector.SetAutoReconnect(true);\n\n        dynamicCameraConnector.ConnectEnded = function (ownerID, baseResult) {\n          _this5.cameraConnectEnded(ownerID, baseResult);\n        };\n\n        dynamicCameraConnector.Disconnected = function (ownerId, type) {\n          _this5.cameraDisconnected(ownerId, type);\n        };\n\n        dynamicCameraConnector.AutoReconnectSucceed = function (ownerId) {\n          _this5.cameraAutoReconnectSucceed(ownerId);\n        };\n\n        this.cameraOptionsMap[destId] = {\n          connector: dynamicCameraConnector,\n          options: cameraOptions\n        };\n      } // this.dynamicCameraConnector.AutoReconnectSucceed = this.cameraOptions.autoReconnectSucceedCallback;\n\n\n      dynamicCameraConnector.SetViewer($(domId));\n      dynamicCameraConnector.BeginConnect(destId);\n    }\n  }, {\n    key: "cameraDisconnect",\n    value: function cameraDisconnect(destId) {\n      var camera = this.cameraOptionsMap[destId];\n\n      if (camera) {\n        camera.connector.Disconnect();\n        setTimeout(function () {\n          var canvas = $(camera.options.domId);\n          camera.connector.ctx.clearRect(0, 0, canvas.width, canvas.height);\n        }, 500);\n      }\n    }\n  }, {\n    key: "cameraConnectEnded",\n    value: function cameraConnectEnded(ownerID, baseResult) {\n      if (this.cameraEventOptions.connectEndedCallback) {\n        this.cameraEventOptions.connectEndedCallback(ownerID, baseResult);\n      }\n    }\n  }, {\n    key: "cameraDisconnected",\n    value: function cameraDisconnected(id, type) {\n      if (this.cameraEventOptions.disconnectedCallback) {\n        this.cameraEventOptions.disconnectedCallback(id, type);\n      }\n    }\n  }, {\n    key: "cameraAutoReconnectSucceed",\n    value: function cameraAutoReconnectSucceed(ownerId) {\n      if (this.cameraEventOptions.autoReconnectSucceedCallback) {\n        this.cameraEventOptions.autoReconnectSucceedCallback(ownerId);\n      }\n    } // endregion\n    // region # 麦克风相关\n\n  }, {\n    key: "microphone",\n    value: function microphone(options) {\n      var _this6 = this;\n\n      var defaultOptions = {\n        /**\r\n         * @NotNull 目标id\r\n         */\n        destId: null,\n\n        /**\r\n         * 断开连接后的回调\r\n         * 返回两个参数：\r\n         * id:      目标id\r\n         * type:    连接断开的类型\r\n         *          [自身断开连接：GuestActiveDisconnect, 被远程方断开连接：OwnerOffline]\r\n         */\n        disconnectedCallback: null,\n\n        /**\r\n         * 连接建立后的回调\r\n         * 返回参数:\r\n         * baseResult: {\r\n         *      FailCause: "成功",\r\n         *      OwnerID: "aa01",\r\n         *      ResultCode: 0,\r\n         * }\r\n         */\n        connectEndedCallback: null,\n\n        /**\r\n         * 重连成功后的回调\r\n         */\n        autoReconnectSucceedCallback: null\n      };\n      this.microphoneOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n      var _this$microphoneOptio = this.microphoneOptions.destId,\n          destId = _this$microphoneOptio === void 0 ? null : _this$microphoneOptio; // 判空\n\n      if (destId === null) {\n        console.error("destId不能为空");\n        return;\n      }\n\n      if (!this.microphoneInit) {\n        this.microphoneConnector = new MicrophoneConnector();\n        this.microphoneConnector.SetAutoReconnect(true);\n\n        this.microphoneConnector.ConnectEnded = function (ownerID, baseResult) {\n          _this6.microphoneConnectEnded(ownerID, baseResult);\n        };\n\n        this.microphoneConnector.Disconnected = function (id, type) {\n          _this6.microphoneDisconnected(id, type);\n        };\n\n        this.microphoneInit = true;\n      }\n\n      this.microphoneConnector.AutoReconnectSucceed = this.microphoneOptions.autoReconnectSucceedCallback;\n      this.microphoneConnector.BeginConnect(destId);\n    }\n  }, {\n    key: "microphoneConnectEnded",\n    value: function microphoneConnectEnded(ownerID, baseResult) {\n      if (this.microphoneOptions.connectEndedCallback) {\n        this.microphoneOptions.connectEndedCallback(baseResult);\n      }\n    }\n  }, {\n    key: "microphoneDisconnected",\n    value: function microphoneDisconnected(id, type) {\n      if (this.microphoneOptions.disconnectedCallback) {\n        this.microphoneOptions.disconnectedCallback(id, type);\n      }\n    }\n  }, {\n    key: "microphoneDisconnect",\n    value: function microphoneDisconnect() {\n      this.microphoneConnector.Disconnect();\n    } // endregion\n    // region # 其他方法\n\n  }, {\n    key: "updateGuests",\n    value: function updateGuests(deviceType) {\n      this.multimediaManager.GetGuests(deviceType);\n    } // endregion\n\n  }, {\n    key: "test",\n    value: function test() {\n      console.log("options:", this.options);\n    }\n  }]);\n\n  return OmcsClient;\n}();\n\nfunction $(id) {\n  return document.getElementById(id);\n}\n\nfunction isSuccess(baseResult) {\n  if (baseResult === null || baseResult === undefined) return false;\n  return baseResult.ResultCode === 0;\n}\n\n/* harmony default export */ __webpack_exports__["default"] = (OmcsClient);\n\n//# sourceURL=webpack://OmcsClient/./src/omcs-client.js?')}},__webpack_require__={r:function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})}},__webpack_exports__={};return __webpack_modules__["./src/omcs-client.js"](0,__webpack_exports__,__webpack_require__),__webpack_exports__=__webpack_exports__.default,__webpack_exports__});