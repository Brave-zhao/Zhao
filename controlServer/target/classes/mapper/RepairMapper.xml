<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tenger.control.repair.dao.RepairMapper">
  <resultMap id="BaseResultMap" type="com.tenger.control.repair.domain.Repair">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="property_id" jdbcType="INTEGER" property="propertyId" />
    <result column="number" jdbcType="VARCHAR" property="number" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="place_name" jdbcType="VARCHAR" property="placeName" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="brand" jdbcType="VARCHAR" property="brand" />
    <result column="property_type" jdbcType="INTEGER" property="propertyType" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="sub_status" jdbcType="TINYINT" property="subStatus" />
    <result column="book_time" jdbcType="TIMESTAMP" property="bookTime" />
    <result column="complete_time" jdbcType="TIMESTAMP" property="completeTime" />
    <result column="spend" jdbcType="INTEGER" property="spend" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="type_name" jdbcType="VARCHAR" property="typeName" />
    <result column="type_flag" jdbcType="VARCHAR" property="typeFlag" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="check_in_time" jdbcType="TIMESTAMP" property="checkInTime" />
    <result column="assign_time" jdbcType="TIMESTAMP" property="assignTime" />
    <result column="assign_type" jdbcType="INTEGER" property="assignType" />
    <result column="place_id" jdbcType="INTEGER" property="placeId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="tenant_id" jdbcType="VARCHAR" property="tenantId" />
    <result column="deleted" jdbcType="TINYINT" property="deleted" />
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
    <result column="files" jdbcType="LONGVARCHAR" property="files" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from tb_repair
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.tenger.control.repair.domain.Repair">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tb_repair (property_id, `number`, user_id, 
      nickname, phone, place_name, 
      `name`, brand, property_type, 
      `status`, sub_status, book_time, 
      complete_time, spend, `type`, 
      type_name, type_flag, `level`, 
      check_in_time, assign_time, assign_type, 
      place_id, deleted, description,
      files)
    values (#{propertyId,jdbcType=INTEGER}, #{number,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{nickname,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{placeName,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{brand,jdbcType=VARCHAR}, #{propertyType,jdbcType=INTEGER}, 
      #{status,jdbcType=TINYINT}, #{subStatus,jdbcType=TINYINT}, #{bookTime,jdbcType=TIMESTAMP}, 
      #{completeTime,jdbcType=TIMESTAMP}, #{spend,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, 
      #{typeName,jdbcType=VARCHAR}, #{typeFlag,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, 
      #{checkInTime,jdbcType=TIMESTAMP}, #{assignTime,jdbcType=TIMESTAMP}, #{assignType,jdbcType=INTEGER}, 
      #{placeId,jdbcType=INTEGER}, #{deleted,jdbcType=TINYINT}, #{description,jdbcType=LONGVARCHAR},
      #{files,jdbcType=LONGVARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.tenger.control.repair.domain.Repair">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update tb_repair
    set property_id = #{propertyId,jdbcType=INTEGER},
      `number` = #{number,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      nickname = #{nickname,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      place_name = #{placeName,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      brand = #{brand,jdbcType=VARCHAR},
      property_type = #{propertyType,jdbcType=INTEGER},
      `status` = #{status,jdbcType=TINYINT},
      sub_status = #{subStatus,jdbcType=TINYINT},
      book_time = #{bookTime,jdbcType=TIMESTAMP},
      complete_time = #{completeTime,jdbcType=TIMESTAMP},
      spend = #{spend,jdbcType=INTEGER},
      `type` = #{type,jdbcType=INTEGER},
      type_name = #{typeName,jdbcType=VARCHAR},
      type_flag = #{typeFlag,jdbcType=VARCHAR},
      `level` = #{level,jdbcType=INTEGER},
      check_in_time = #{checkInTime,jdbcType=TIMESTAMP},
      assign_time = #{assignTime,jdbcType=TIMESTAMP},
      assign_type = #{assignType,jdbcType=INTEGER},
      place_id = #{placeId,jdbcType=INTEGER},
      deleted = #{deleted,jdbcType=TINYINT},
      description = #{description,jdbcType=LONGVARCHAR},
      files = #{files,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, property_id, `number`, user_id, nickname, phone, place_name, `name`, brand, 
    property_type, `status`, sub_status, book_time, complete_time, spend, `type`, type_name, 
    type_flag, `level`, check_in_time, assign_time, assign_type, place_id, create_time, 
    update_time, tenant_id, deleted, description, files
    from tb_repair
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, property_id, `number`, user_id, nickname, phone, place_name, `name`, brand, 
    property_type, `status`, sub_status, book_time, complete_time, spend, `type`, type_name, 
    type_flag, `level`, check_in_time, assign_time, assign_type, place_id, create_time, 
    update_time, tenant_id, deleted, description, files
    from tb_repair
  </select>

  <update id="updateNumberById">
    UPDATE tb_repair
    SET number=#{number}
    WHERE id = #{id}
  </update>

  <select id="selectByDto" resultMap="BaseResultMap">
    SELECT r.*
    FROM tb_repair r
    LEFT OUTER JOIN tb_repair_assign ra
    ON r.id=ra.repair_id AND ra.deleted=0
    WHERE 1
    <if test="dto.placeName!=null and dto.placeName != ''">
      AND FIND_IN_SET(r.place_name,#{dto.placeName})
    </if>
    <if test="dto.name!=null and dto.name != ''">
      AND FIND_IN_SET(r.name,#{dto.name})
    </if>
    <if test="dto.propertyType != null and dto.propertyType != ''">
      AND FIND_IN_SET(r.property_type,#{dto.propertyType})
    </if>
    <if test="dto.nickname!=null and dto.nickname != ''">
      AND FIND_IN_SET(r.nickname,#{dto.nickname})
    </if>
    <if test="dto.status!=null and dto.status != ''">
      <choose>
        <when test="dto.isSub">
          AND FIND_IN_SET(r.sub_status,#{dto.status})
        </when>
        <otherwise>
          AND FIND_IN_SET(r.status,#{dto.status})
        </otherwise>
      </choose>
    </if>
    <if test="dto.search!=null and dto.search!=''">
      AND CONCAT_WS(',',r.number,r.place_name,r.description) LIKE #{dto.search}
    </if>
    <if test="dto.userIds!=null and dto.userIds!=''">
      AND (r.user_id IN (${dto.userIds}) OR ra.user_id IN (${dto.userIds})
        <if test="dto.depIds!=null and dto.depIds!=''">
          OR ra.dep_id IN (${dto.depIds})
        </if>
      )
    </if>
    <if test="dto.typeName!=null and dto.typeName != ''">
      AND r.type_name IN (${dto.inTypeName})
    </if>
    AND r.deleted=0
    GROUP BY r.id
  </select>

  <select id="selectByDtoV2" resultMap="BaseResultMap">
    SELECT r.*
    FROM tb_repair r
    LEFT OUTER JOIN tb_repair_assign ra
    ON r.id=ra.repair_id AND ra.deleted=0
    WHERE 1
    <if test="dto.placeName!=null and dto.placeName != ''">
      AND r.place_name IN (${dto.inPlaceName})
    </if>
    <if test="dto.name!=null and dto.name != ''">
      AND r.name IN (${dto.inName})
    </if>
    <if test="dto.propertyType != null and dto.propertyType != ''">
      AND r.property_type IN (${dto.propertyType})
    </if>
    <if test="dto.nickname!=null and dto.nickname != ''">
      AND r.nickname IN (${dto.inNickname})
    </if>
    <if test="dto.status!=null and dto.status != ''">
      AND r.status IN (${dto.status})
    </if>
    <if test="dto.search!=null and dto.search!=''">
      AND CONCAT_WS(',',r.number,r.place_name,r.description) LIKE #{dto.search}
    </if>
    <if test="dto.isSub">
      AND ( 0
      <if test="dto.managePlaceIds!=null and dto.managePlaceIds!=''">
        OR r.place_id IN (${dto.managePlaceIds})
      </if>
      <if test="dto.depIds!=null and dto.depIds!=''">
        OR ra.dep_id IN (${dto.depIds})
      </if>
      <if test="dto.extraWhere!=null and dto.extraWhere!=''">
        ${dto.extraWhere}
      </if>
      )
    </if>
    <if test="dto.typeName!=null and dto.typeName != ''">
      AND r.type_name IN (${dto.inTypeName})
    </if>
    AND r.deleted=0
    GROUP BY r.id
  </select>

  <select id="selectByDtoForUser" resultType="java.util.Map">
    SELECT r.*,GROUP_CONCAT(ra.user_id) AS `assign_user_ids`
    FROM tb_repair r
    LEFT OUTER JOIN tb_repair_assign ra
    ON r.id=ra.repair_id AND ra.deleted=0
    WHERE 1
    <if test="dto.placeName!=null and dto.placeName != ''">
      AND r.place_name IN (${dto.inPlaceName})
    </if>
    <if test="dto.name!=null and dto.name != ''">
      AND r.name IN (${dto.inName})
    </if>
    <if test="dto.propertyType != null and dto.propertyType != ''">
      AND r.property_type IN (${dto.propertyType})
    </if>
    <if test="dto.nickname!=null and dto.nickname != ''">
      AND r.nickname IN (${dto.inNickname})
    </if>
    <if test="dto.status!=null and dto.status != ''">
      AND r.status IN (${dto.status})
    </if>
    <if test="dto.search!=null and dto.search!=''">
      AND CONCAT_WS(',',r.number,r.place_name,r.description) LIKE #{dto.search}
    </if>
    <if test="dto.userIds!=null and dto.userIds!=''">
      AND r.user_id IN (${dto.userIds})
    </if>
    <if test="dto.typeName!=null and dto.typeName != ''">
      AND r.type_name IN (${dto.inTypeName})
    </if>
    <if test="dto.start_!=null and dto.end_!=null">
      AND r.create_time BETWEEN #{dto.start_} AND #{dto.end_}
    </if>
    AND r.deleted=0
    GROUP BY r.id
  </select>

  <select id="selectByDtoForMaintainer" resultType="java.util.Map">
    SELECT r.*,GROUP_CONCAT(ra.user_id) AS `assign_user_ids`,re.score
    FROM tb_repair r
    INNER JOIN tb_repair_assign ra
    ON r.id=ra.repair_id AND ra.deleted=0 AND ra.user_id IN (${dto.userIds})
    LEFT OUTER JOIN tb_repair_evaluation re ON r.id=re.repair_id AND re.deleted=0
    WHERE 1
    <if test="dto.placeName!=null and dto.placeName != ''">
      AND r.place_name IN (${dto.inPlaceName})
    </if>
    <if test="dto.name!=null and dto.name != ''">
      AND r.name IN (${dto.inName})
    </if>
    <if test="dto.propertyType != null and dto.propertyType != ''">
      AND r.property_type IN (${dto.propertyType})
    </if>
    <if test="dto.nickname!=null and dto.nickname != ''">
      AND r.nickname IN (${dto.inNickname})
    </if>
    <if test="dto.status!=null and dto.status != ''">
      AND r.status IN (${dto.status})
    </if>
    <if test="dto.search!=null and dto.search!=''">
      AND CONCAT_WS(',',r.number,r.place_name,r.description) LIKE #{dto.search}
    </if>
    <if test="dto.typeName!=null and dto.typeName != ''">
      AND r.type_name IN (${dto.inTypeName})
    </if>
    <if test="dto.start_!=null and dto.end_!=null">
      AND r.create_time BETWEEN #{dto.start_} AND #{dto.end_}
    </if>
    AND r.deleted=0
    GROUP BY r.id
  </select>

  <update id="deleteByIds" parameterType="java.lang.String">
    UPDATE tb_repair
    SET deleted= 1
    WHERE FIND_IN_SET(id, #{ids})
  </update>

  <update id="changeStatusByIds">
    UPDATE tb_repair
    SET status=#{status}
    WHERE FIND_IN_SET(id, #{ids})
  </update>

  <update id="changeSubStatusByIds">
    UPDATE tb_repair
    SET sub_status=#{subStatus}
    WHERE FIND_IN_SET(id, #{ids})
  </update>


  <select id="selectByIds" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT *
    FROM tb_repair
    WHERE FIND_IN_SET(id, #{repairIds})
  </select>

  <select id="countInStatus" parameterType="java.lang.String" resultType="java.lang.Integer">
    SELECT COUNT(1) FROM tb_repair
    WHERE 1
    <if test="status != null and status != ''">
      AND FIND_IN_SET(status, #{status})
    </if>
    AND deleted!=1
  </select>

  <select id="countInStatusByUserId" resultType="java.lang.Integer">
    SELECT COUNT(1) FROM tb_repair
    WHERE 1
    <if test="status != null and status != ''">
      AND status IN (${status})
    </if>
    AND user_id=#{userId}
    AND deleted!=1
  </select>

  <select id="countByDto" resultType="java.lang.Integer">
    SELECT COUNT(1)
    FROM
    (
    SELECT COUNT(r.id)
    FROM tb_repair r
    LEFT OUTER JOIN tb_repair_assign ra
    ON r.id=ra.repair_id AND ra.deleted=0
    WHERE 1
    <if test="dto.status!=null and dto.status != ''">
      <choose>
        <when test="dto.isSub">
          AND FIND_IN_SET(r.sub_status,#{dto.status})
        </when>
        <otherwise>
          AND FIND_IN_SET(r.status,#{dto.status})
        </otherwise>
      </choose>
    </if>
    <if test="dto.userIds!=null and dto.userIds!=''">
      AND (r.user_id IN (${dto.userIds}) OR ra.user_id IN (${dto.userIds})
      <if test="dto.depIds!=null and dto.depIds!=''">
        OR ra.dep_id IN (${dto.depIds})
      </if>
      )
    </if>
    AND r.deleted=0
    GROUP BY r.id
    ) temp_count
  </select>

  <select id="countByDtoV2" resultType="java.lang.Integer">
    SELECT COUNT(1)
    FROM
    (
    SELECT COUNT(r.id)
    FROM tb_repair r
    LEFT OUTER JOIN tb_repair_assign ra
    ON r.id=ra.repair_id AND ra.deleted=0
    WHERE 1
    <if test="dto.status!=null and dto.status != ''">
      AND r.status IN (${dto.status})
    </if>
    <if test="dto.isSub">
      AND ( 0
      <if test="dto.managePlaceIds!=null and dto.managePlaceIds!=''">
        OR r.place_id IN (${dto.managePlaceIds})
      </if>
      <if test="dto.depIds!=null and dto.depIds!=''">
        OR ra.dep_id IN (${dto.depIds})
      </if>
      <if test="dto.extraWhere!=null and dto.extraWhere!=''">
        ${dto.extraWhere}
      </if>
      )
    </if>
    AND r.deleted=0
    GROUP BY r.id
    ) temp_count
  </select>

  <select id="countByDtoDistinctPropertyIdBetweenTime" resultType="java.lang.Integer">
    SELECT COUNT(DISTINCT r.property_id) FROM tb_repair r
    WHERE 1
    <if test="dto.propertyType != null and dto.propertyType != ''">
      AND FIND_IN_SET(r.property_type,#{dto.propertyType})
    </if>
    <if test="dto.brand != null and dto.brand != ''">
      AND FIND_IN_SET(r.brand,#{dto.brand})
    </if>
    <if test="dto.placeName!=null and dto.placeName != ''">
      AND FIND_IN_SET(r.place_name,#{dto.placeName})
    </if>
    <if test="start!=null and end != null">
      AND create_time BETWEEN #{start} AND #{end}
    </if>
    AND r.deleted=0
  </select>

  <select id="countSpendByDtoBetweenTime" resultType="java.lang.Long">
    SELECT IFNULL(SUM(spend), 0) FROM tb_repair
    WHERE status=4
    <if test="start!=null and end != null">
      AND create_time BETWEEN #{start} AND #{end}
    </if>
    AND deleted=0
  </select>

  <select id="countAvgEvaluationScoreByDtoBetweenTime" resultType="java.lang.Float">
    SELECT IFNULL(AVG(IFNULL(re.score, 0)), 0) FROM tb_repair r
    INNER JOIN tb_repair_evaluation re on r.id = re.repair_id AND re.deleted=0
    WHERE r.status=4
    <if test="start!=null and end != null">
      AND r.create_time BETWEEN #{start} AND #{end}
    </if>
    AND r.deleted=0
  </select>

  <select id="countAssignByDtoBetweenTime" resultType="java.lang.Integer">
    SELECT COUNT(1) FROM tb_repair r
    INNER JOIN tb_repair_assign ra ON r.id=ra.repair_id AND ra.deleted=0
    WHERE 1
    <if test="dto.userIds!=null and dto.userIds!=''">
      AND ra.user_id IN (${dto.userIds})
    </if>
    <if test="start!=null and end != null">
      AND r.create_time BETWEEN #{start} AND #{end}
    </if>
    AND r.deleted=0
  </select>
  <select id="countForMaintainerFocus" resultType="java.lang.Integer">
    SELECT COUNT(1) FROM
      (SELECT r.*
       FROM tb_repair r
              INNER JOIN tb_repair_assign ra
                         ON r.id=ra.repair_id AND ra.deleted=0 AND ra.user_id=#{userId}
       WHERE r.deleted=0
         AND r.create_time &gt; #{createTime}
       GROUP BY r.id) AS temp
  </select>
  <select id="countBetweenTimeGroupByStatus" resultType="com.tenger.control.vo.RepairStatusCountVo">
    SELECT status, COUNT(1) AS `count` FROM tb_repair
    WHERE 1
    <if test="start != null and end !=null">
      AND create_time &gt;= #{start} AND create_time &lt; #{end}
    </if>
    AND deleted!=1
    GROUP BY status
  </select>

  <select id="listInStatusBetweenDate" resultMap="BaseResultMap">
    SELECT * FROM tb_repair
    WHERE deleted != 1
    <if test="statuses != null">
      AND FIND_IN_SET(`status`, #{statuses})
    </if>
    <if test="startTime != null">
      AND create_time &gt;= #{startTime}
    </if>
    <if test="endTime != null">
      AND create_time &lt;=#{endTime}
    </if>
    <if test="propertyIds != null">
      AND  FIND_IN_SET(property_id, #{propertyIds})
    </if>
    ORDER BY create_time
  </select>
</mapper>