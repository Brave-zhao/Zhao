<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tenger.control.dao.AccessControlOpenLogMapper">
  <resultMap id="BaseResultMap" type="com.tenger.control.domain.AccessControlOpenLog">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="unique_code" jdbcType="VARCHAR" property="uniqueCode" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="user_type" jdbcType="TINYINT" property="userType" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="dep_id" jdbcType="VARCHAR" property="depId" />
    <result column="dep_name" jdbcType="VARCHAR" property="depName" />
    <result column="way" jdbcType="TINYINT" property="way" />
    <result column="place_id" jdbcType="INTEGER" property="placeId" />
    <result column="property_id" jdbcType="INTEGER" property="propertyId" />
    <result column="deleted" jdbcType="TINYINT" property="deleted" />
    <result column="tenant_id" jdbcType="VARCHAR" property="tenantId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="open_type" jdbcType="TINYINT" property="openType" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from tb_access_control_open_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.tenger.control.domain.AccessControlOpenLog">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tb_access_control_open_log (unique_code, `type`, `time`,
    `status`, user_id, user_type,
    nickname, dep_id, dep_name,
    way, place_id, property_id,
    deleted, open_type)
    values (#{uniqueCode,jdbcType=VARCHAR}, #{type,jdbcType=TINYINT}, #{time,jdbcType=TIMESTAMP},
    #{status,jdbcType=TINYINT}, #{userId,jdbcType=INTEGER}, #{userType,jdbcType=TINYINT},
    #{nickname,jdbcType=VARCHAR}, #{depId,jdbcType=VARCHAR}, #{depName,jdbcType=VARCHAR},
    #{way,jdbcType=TINYINT}, #{placeId,jdbcType=INTEGER}, #{propertyId,jdbcType=INTEGER},
    #{deleted,jdbcType=TINYINT}, #{openType,jdbcType=TINYINT})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.tenger.control.domain.AccessControlOpenLog">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update tb_access_control_open_log
    set unique_code = #{uniqueCode,jdbcType=VARCHAR},
    `type` = #{type,jdbcType=TINYINT},
    `time` = #{time,jdbcType=TIMESTAMP},
    `status` = #{status,jdbcType=TINYINT},
    user_id = #{userId,jdbcType=INTEGER},
    user_type = #{userType,jdbcType=TINYINT},
    nickname = #{nickname,jdbcType=VARCHAR},
    dep_id = #{depId,jdbcType=VARCHAR},
    dep_name = #{depName,jdbcType=VARCHAR},
    way = #{way,jdbcType=TINYINT},
    place_id = #{placeId,jdbcType=INTEGER},
    property_id = #{propertyId,jdbcType=INTEGER},
    deleted = #{deleted,jdbcType=TINYINT},
    open_type = #{openType,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, unique_code, `type`, `time`, `status`, user_id, user_type, nickname, dep_id,
    dep_name, way, place_id, property_id, deleted, tenant_id, create_time, update_time,
    open_type
    from tb_access_control_open_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, unique_code, `type`, `time`, `status`, user_id, user_type, nickname, dep_id,
    dep_name, way, place_id, property_id, deleted, tenant_id, create_time, update_time,
    open_type
    from tb_access_control_open_log
  </select>

  <insert id="insertNT" parameterType="com.tenger.control.domain.AccessControlOpenLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tb_access_control_open_log (unique_code, `type`, `time`,
    `status`, user_id, user_type, nickname, way, place_id, property_id, tenant_id, dep_id, dep_name)
    values (#{uniqueCode,jdbcType=VARCHAR}, #{type,jdbcType=TINYINT}, #{time,jdbcType=TIMESTAMP},
    #{status,jdbcType=TINYINT}, #{userId,jdbcType=INTEGER}, #{userType,jdbcType=TINYINT},
    #{nickname,jdbcType=VARCHAR}, #{way,jdbcType=TINYINT},
    #{placeId,jdbcType=INTEGER}, #{propertyId,jdbcType=INTEGER}, #{tenantId,jdbcType=VARCHAR},
    #{depId,jdbcType=VARCHAR}, #{depName,jdbcType=VARCHAR})
  </insert>

  <select id="countInUniqueCodesBetweenTimeGroupByUniqueCode" resultType="java.util.Map">
    SELECT unique_code,type,COUNT(1) AS count FROM tb_access_control_open_log
    WHERE deleted=0
    <if test="uniqueCodes != null and uniqueCodes != ''">
      AND FIND_IN_SET(unique_code, #{uniqueCodes})
    </if>
    <if test="start != null">
      AND time &gt;= #{start}
    </if>
    <if test="end != null">
      AND time &lt;= #{end}
    </if>
    <if test="status != null and status != -1">
      AND status = #{status}
    </if>
    <if test="type != null and type != -1">
      AND type = #{type}
    </if>
    GROUP BY unique_code,type
  </select>

  <select id="selectByDto" resultType="java.util.Map">
    SELECT * FROM tb_access_control_open_log
    WHERE deleted=0
    <if test="start != null">
      AND time &gt;= #{start}
    </if>
    <if test="end != null">
      AND time &lt;= #{end}
    </if>
    <if test="uniqueCodes != null and uniqueCodes != ''">
      AND FIND_IN_SET(unique_code, #{uniqueCodes})
    </if>
    <if test="way != null and way != -1">
      AND way = #{way}
    </if>
    <if test="status != null and status != -1">
      AND status = #{status}
    </if>
    <if test="placeIds != null and placeIds != ''">
      AND FIND_IN_SET(place_id, #{placeIds})
    </if>
    <if test="userIds != null and userIds != ''">
      AND FIND_IN_SET(user_id, #{userIds})
    </if>
    <if test="depIds != null and depIds != ''">
      AND is_mixed(dep_id, #{depIds})
    </if>
    <if test="userType != null and userType != -1">
      AND user_type=#{userType}
    </if>
    <if test="type != null and type != -1">
      AND type=#{type}
    </if>
    ORDER BY time DESC
  </select>

  <update id="deleteByIds" parameterType="java.lang.String">
    UPDATE tb_access_control_open_log
    SET deleted=1
    WHERE FIND_IN_SET(id, #{ids})
  </update>

  <insert id="insertBatchNT">
    INSERT INTO tb_access_control_open_log (unique_code, `type`, `time`,
    `status`, user_id, user_type, nickname, way, place_id, property_id,
    tenant_id, dep_id, dep_name, open_type) VALUES
    <foreach collection="list" index="index" item="item" separator=",">
      (#{item.uniqueCode}, #{item.type}, #{item.time},
      #{item.status}, #{item.userId}, #{item.userType},
      #{item.nickname}, #{item.way}, #{item.placeId}, #{item.propertyId},
      #{item.tenantId}, #{item.depId}, #{item.depName}, #{item.openType})
    </foreach>
  </insert>

  <delete id="deleteAll">
    UPDATE tb_access_control_open_log
    SET deleted=1
  </delete>
</mapper>